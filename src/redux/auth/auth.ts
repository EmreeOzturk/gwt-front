import { createAsyncThunk, createSlice, PayloadAction, createSelector } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";

export interface AuthState {
  address: string;
  role: string;
  nftId: number | null;
  withdrawableBalance: number;
  totalRevenue: number;
  vipLvl: number;
  lvl: number;
  lowPotentiel: number;
  nftInfo: any[];
  downlines: number | string;
  referralIncome: number;
  isEmty: boolean;
  loading: boolean;
  hidden: boolean;
  change: boolean;
  status: "idle" | "loading" | "failed";
  locale: string;
  isListing: boolean;
}

const initialState: AuthState = {
  address: "",
  nftId: null,
  role: "",
  withdrawableBalance: 0,
  totalRevenue: 0,
  vipLvl: 1,
  lvl: 1,
  lowPotentiel: 0,
  isEmty: true,
  nftInfo: [],
  downlines: 0,
  referralIncome: 0,
  loading: false,
  hidden: true,
  status: "loading",
  change: false,
  locale: "tr",
  isListing: false,
};

export const AuthSlice = createSlice({
  name: "Auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleLocale(state, { payload }) {
      payload = payload || state.locale;
      localStorage.setItem("i18nextLng", payload);
      state.locale = payload;
    },
    setAddress: (state, action: PayloadAction<string>) => {
      state.address = action.payload;
    },
    setRole: (state, action: PayloadAction<string>) => {
      state.role = action.payload;
    },
    setNftInfo: (state, action: PayloadAction<any[]>) => {
      state.nftInfo = action.payload;
    },
    setEmty: (state, action: PayloadAction<boolean>) => {
      state.isEmty = action.payload;
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setHidden: (state, action: PayloadAction<boolean>) => {
      state.hidden = action.payload;
    },
    setChange: (state, action: PayloadAction<boolean>) => {
      state.change = action.payload;
    },
    setWithdrawableBalance: (state, action: PayloadAction<number>) => {
      state.withdrawableBalance = action.payload;
    },
    setTotalRevenue: (state, action: PayloadAction<number>) => {
      state.totalRevenue = action.payload;
    },
    setVipLvl: (state, action: PayloadAction<number>) => {
      state.vipLvl = action.payload;
    },
    setClear: (state) => {
      state.address = "";
      state.role = "";
      state.nftInfo = [];
      state.isEmty = true;
      state.loading = false;
      state.hidden = true;
      state.change = false;
      state.withdrawableBalance = 0;
      state.totalRevenue = 0;
      state.vipLvl = 1;
    },
    setnftId: (state, action: PayloadAction<number>) => {
      state.nftId = action.payload;
    },
    setDownlines: (state, action: PayloadAction<number | string>) => {
      state.downlines = action.payload;
    },
    setReferralIncome: (state, action: PayloadAction<number>) => {
      state.referralIncome = action.payload;
    },
    setLvl: (state, action: PayloadAction<number>) => {
      state.lvl = action.payload;
    },
    setLowPotentiel: (state, action: PayloadAction<number>) => {
      state.lowPotentiel = action.payload;
    },
    setListing: (state, action: PayloadAction<boolean>) => {
      state.isListing = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  /* extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  }, */
});

export const {
  setAddress,
  setRole,
  setNftInfo,
  setEmty,
  setLoading,
  setHidden,
  setChange,
  setWithdrawableBalance,
  setTotalRevenue,
  setVipLvl,
  setClear,
  setnftId,
  setDownlines,
  setReferralIncome,
  setLvl,
  setLowPotentiel,
  toggleLocale,
  setListing,
} = AuthSlice.actions;

// Create individual selectors for each piece of data
const selectAddress = (state: { Auth: AuthState }) => state.Auth.address;
const selectNftId = (state: { Auth: AuthState }) => state.Auth.nftId;
const selectRole = (state: { Auth: AuthState }) => state.Auth.role;
const selectWithdrawableBalance = (state: { Auth: AuthState }) => state.Auth.withdrawableBalance;
const selectTotalRevenue = (state: { Auth: AuthState }) => state.Auth.totalRevenue;
const selectVipLvl = (state: { Auth: AuthState }) => state.Auth.vipLvl;
const selectLvl = (state: { Auth: AuthState }) => state.Auth.lvl;
const selectLowPotentiel = (state: { Auth: AuthState }) => state.Auth.lowPotentiel;
const selectIsEmty = (state: { Auth: AuthState }) => state.Auth.isEmty;
const selectNftInfo = (state: { Auth: AuthState }) => state.Auth.nftInfo;
const selectDownlines = (state: { Auth: AuthState }) => state.Auth.downlines;
const selectReferralIncome = (state: { Auth: AuthState }) => state.Auth.referralIncome;
const selectLoading = (state: { Auth: AuthState }) => state.Auth.loading;
const selectHidden = (state: { Auth: AuthState }) => state.Auth.hidden;
const selectStatus = (state: { Auth: AuthState }) => state.Auth.status;
const selectChange = (state: { Auth: AuthState }) => state.Auth.change;
const selectLocale = (state: { Auth: AuthState }) => state.Auth.locale;
const selectIsListing = (state: { Auth: AuthState }) => state.Auth.isListing;

// Memoized selector using createSelector
export const selectData = createSelector(
  [
    selectAddress,
    selectNftId,
    selectRole,
    selectWithdrawableBalance,
    selectTotalRevenue,
    selectVipLvl,
    selectLvl,
    selectLowPotentiel,
    selectIsEmty,
    selectNftInfo,
    selectDownlines,
    selectReferralIncome,
    selectLoading,
    selectHidden,
    selectStatus,
    selectChange,
    selectLocale,
    selectIsListing,
  ],
  (
    address,
    nftId,
    role,
    withdrawableBalance,
    totalRevenue,
    vipLvl,
    lvl,
    lowPotentiel,
    isEmty,
    nftInfo,
    downlines,
    referralIncome,
    loading,
    hidden,
    status,
    change,
    locale,
    isListing
  ) => ({
    address,
    nftId,
    role,
    withdrawableBalance,
    totalRevenue,
    vipLvl,
    lvl,
    lowPotentiel,
    isEmty,
    nftInfo,
    downlines,
    referralIncome,
    loading,
    hidden,
    status,
    change,
    locale,
    isListing,
  })
);

export default AuthSlice.reducer;
